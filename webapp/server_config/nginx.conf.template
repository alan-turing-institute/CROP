
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       80;
        server_name  _;

        location / {
	    proxy_pass http://127.0.0.1:8000/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Prefix /;
        }

	# On-disk Brotli-precompressed data files should be served with compression enabled:
	location ~ .+\.(data|symbols\.json)\.br$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    # Because this file is already pre-compressed on disk, disable the on-demand compression on it.
            # Otherwise nginx would attempt double compression.
    	    gzip off;
    	    add_header Content-Encoding br;
    	    default_type application/octet-stream;
	}

	# On-disk Brotli-precompressed JavaScript code files:
	location ~ .+\.js\.br$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    gzip off; # Do not attempt dynamic gzip compression on an already compressed file
    	    add_header Content-Encoding br;
    	    default_type application/javascript;
	}

        # On-disk Brotli-precompressed WebAssembly files:
	location ~ .+\.wasm\.br$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding br;
    	    # Enable streaming WebAssembly compilation by specifying the correct MIME type for
    	    # Wasm files.
    	    default_type application/wasm;
	}

	# On-disk gzip-precompressed data files should be served with compression enabled:
	location ~ .+\.(data|symbols\.json)\.gz$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    gzip off; # Do not attempt dynamic gzip compression on an already compressed file
    	    add_header Content-Encoding gzip;
    	    default_type application/gzip;
	}

	# On-disk gzip-precompressed JavaScript code files:
	location ~ .+\.js\.gz$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    gzip off; # Do not attempt dynamic gzip compression on an already compressed file
    	    add_header Content-Encoding gzip; # The correct MIME type here would be application/octet-stream, but due to Safari bug https://bugs.webkit.org/show_bug.cgi?id=247421, it's preferable to use MIME Type application/gzip instead.
    	    default_type application/javascript;
	}

	# On-disk gzip-precompressed WebAssembly files:
	location ~ .+\.wasm\.gz$ {
	    root /Users/nbarlow/CROP/webapp/app/base;
    	    gzip off; # Do not attempt dynamic gzip compression on an already compressed file
    	    add_header Content-Encoding gzip;
    	    # Enable streaming WebAssembly compilation by specifying the correct MIME type for
    	    # Wasm files.
    	    default_type application/wasm;
	}
    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
